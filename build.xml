<project name="streamsx.inetserver" default="all" basedir=".">
	
	<description>Build file for streamsx.inet project, built the toolkits and samples.</description>
	
	<!-- set global properties for this build -->
	<property environment="env" />
	<property name="streams.install"     value="${env.STREAMS_INSTALL}" />
	<property name="toolkit.dir"         value="com.ibm.streamsx.inetserver"/>
	<property name="doc.string"          value="doc"/>
	<property name="doc.dir"             value="${doc.string}/spldoc"/>
	<property name="samples.dir"         value="samples"/>
	<property name="samples.doc.dir"     value="samples/${doc.string}/spldoc"/>
	<property name="test.dir"            value="tests"/>
	<property name="release.dir"         value="release" />
	<property name="release.info.file"   value="${toolkit.dir}/build.info"/>

	<property name="tktitle"             value="IBMStreams ${ant.project.name} Toolkit" />
	<property name="tkauthor"            value="IBMStreams Open Source Community at GitHub - https://github.com/IBMStreams/${ant.project.name}" />

	<property name="spl-md"              value="${env.STREAMS_INSTALL}/bin/spl-make-doc" />
	<property name="spl-st"              value="${env.STREAMS_INSTALL}/bin/streamtool" />

	<!-- Create the time stamp -->
	<tstamp/>

	<!-- Targets -->
	<target name="all" depends="toolkit,  spldoc"
		description="Main target: Build the toolkit code, build the samples index and generate the spl documentation - incremental build"
	/>

	<target name="clean" depends="spldoc-clean,samples-clean,toolkit-clean,releaseinfo-clean"
		description="Main target: clean up toolkit code, samples code and all spldocs">
	</target>

	<target name="toolkit" depends="get_name"
		description="Main target: Build any code and index the toolkit - incremental build." >
		<ant dir="${toolkit.dir}" target="toolkit"/>
	</target>

	<target name="toolkit-clean"
		description="Main target: Clean all generated and downloaded toolkit files and cleans samples">
		<ant dir="${toolkit.dir}" target="clean-all" />
	</target>

	<target name="get_name">
		<xmlproperty file="${toolkit.dir}/info.xml" prefix="tkinfo" keepRoot="no"/>
		<echo message="Toolkit Name: ${tkinfo.identity.name}"/>
		<echo message="Toolkit Version: ${tkinfo.identity.version}"/>
	</target>

	<target name="spldoc" depends="toolkit"
		description="Main target: Create SPLDOC.">
		<echo message="Tookit spldoc to: ${doc.dir}"/>
		<exec executable="${spl-md}" failonerror="true">
			<arg value="--include-composite-operator-diagram" />
			<arg value="--author" />
			<arg value="${tkauthor}" />
			<arg value="--doc-title" />
			<arg value="${tktitle}" />
			<arg value="--directory" />
			<arg value="${toolkit.dir}" />
			<arg value="--warn-no-comments"/>
			<arg value="--copy-image-files" />
			<arg value="--output-directory" />
			<arg value="${doc.dir}" />
		</exec>
	</target>

	<target name="spldoc-clean"
		description="Clean the toolkit documentation">
		<delete dir="${doc.string}"/>
		<delete dir="${samples.doc.dir}"/>
	</target>

	<!-- Targets on samples -->
	<target name="samples" depends="toolkit"
		description="Build all samples">
		<subant genericantfile="${basedir}/build.xml">
			<target name="build-sample-target"/>
			<dirset dir="${samples.dir}" includes="*" excludes="${doc.string}"/>
		</subant>
	</target>

	<target name="samples-clean"
		description="Clean up samples index and samples code">
		<subant genericantfile="${basedir}/build.xml">
			<target name="clean-sample-target"/>
			<dirset dir="${samples.dir}" includes="*" excludes="${doc.string}"/>
		</subant>
	</target>

	<target name="spldoc-samples" depends="samples"
		description="Generate the doc for all samples">
		<echo message="All samples spldoc to: ${samples.doc.dir}"/>
		<exec executable="bash" outputproperty="samples.list" failonerror="true">
			<arg value="-c"/>
			<arg value="for x in ${samples.dir}/*/info.xml; do echo -n ${x%/*};  echo -n : ; done"/>
		</exec>
		<echo message="All samples to SPLDOC: ${samples.list}"/>
		<exec executable="${spl-md}" failonerror="true">
			<arg value="--include-composite-operator-diagram"/>
			<arg value="--author"/>
			<arg value="${tkauthor}"/>
			<arg value="--doc-title"/>
			<arg value="${tktitle}"/>
			<arg value="--toolkit-path"/>
			<arg value="${samples.list}"/>
			<arg value="--warn-no-comments"/>
			<arg value="--check-tags"/>
			<arg value="--include-source"/>
			<arg value="--output-directory"/>
			<arg value="${samples.doc.dir}"/>
		</exec>
	</target>
	
	<target name="build-sample-target">
		<echo message="Sample to build: ${basedir}"/>
		<exec executable="make" failonerror="true" dir="${basedir}"/>
	</target>
	
	<target name="clean-sample-target">
		<echo message="Sample to clean: ${basedir}"/>
		<exec executable="make" failonerror="true" dir="${basedir}">
			<arg value="clean" />
		</exec>
	</target>

	<!-- Test targets -->
	<target name="test" depends="toolkit"
		description="Execute the toolkit test. Requires an up to date toolkit build">
		<echo message="Start full test"/>
		<exec executable="./runTest.sh" dir="${test.dir}/frameworktests" failonerror="true">
			<arg value="--noprompt"/>
			<arg value="--no-browser"/>
		</exec>
	</target>

	<target name="test-quick" depends="toolkit"
		description="Execute the toolkit quick test. Requires an up to date toolkit build">
		<echo message="Start quick test"/>
		<exec executable="./runTest.sh" dir="${test.dir}/frameworktests" failonerror="true">
			<arg value="--noprompt"/>
			<arg value="--no-browser"/>
			<arg value="--category"/>
			<arg value="quick"/>
		</exec>
	</target>

	<target name="test-clean"
		description="Clean up all generated test artifacts">
		<delete dir="${test.dir}/frameworktests/workdir"/>
		<delete dir="${test.dir}/frameworktests/scripts"/>
	</target>

	<target name="tests" depends="toolkit">
		<ant dir="${toolkit.dir}" target="test"/>
		<ant dir="${toolkit.test}" target="all"/>
	</target>

	<!-- Targets to build releases -->
	<target name="release" description="Make a toolkit release archive - purge workspace and build toolkit from scratch" depends="clean">
		<antcall target="release-target" inheritAll="true"/>
	</target>

	<target name="release-target" depends="releaseinfo">
		<!-- prepare toolkit code and docs -->
		<antcall target="spldoc"/>
		<antcall target="samples"/> <!-- check if samples are compile clean -->
		<antcall target="samples-clean"/> <!-- remove samples build artifacts -->
		<xmlproperty file="${toolkit.dir}/info.xml" prefix="tkinfo" keepRoot="no"/>
		<echo message="Make releasefile Toolkit Version: ${tkinfo.info:identity.info:version}"/>
		<!-- Extract the git commit hash -->
		<exec executable="git" outputproperty="commithash.short">
				<arg value="rev-parse"/>
				<arg value="--short"/>
				<arg value="HEAD"/>
		</exec>
		<!-- create release bundle -->
		<mkdir dir="${release.dir}" />
		<property name="releasefilename" value="${release.dir}/streamsx.inetserver-${tkinfo.identity.version}-${commithash.short}-${DSTAMP}-${TSTAMP}.tgz"/>
		<tar compression="gzip" longfile="gnu"
					destfile="${releasefilename}"
					basedir="${basedir}"
					includes="${tkinfo.identity.name}/** samples/** README.md LICENSE"
					excludes="**/.gitignore **/.gitkeep ${toolkit.string}/.project ${toolkit.string}/.settings/** ${toolkit.string}/.classpath ${toolkit.string}/impl/java/ ${toolkit.string}/icons/ ${toolkit.string}/build.xml"
		/>
		<checksum file="${releasefilename}"/>
		<checksum algorithm="sha1" file="${releasefilename}"/>
	</target>

	<!-- Extract the git commit hash and make release info -->
	<target name="releaseinfo" depends="clean-ignored" description="Make the release information file ${release.info.file}">
		<exec executable="git" outputproperty="commithash.long" failonerror="true">
			<arg value="rev-parse" />
			<arg value="HEAD" />
		</exec>
		<exec executable="bash" outputproperty="streamsversion" failonerror="true">
			<arg value="-c"/>
			<arg value="${spl-st} version | grep Version="/>
		</exec>
		<exec executable="bash" failonerror="true">
			<arg value="-c" />
			<arg value="echo -e &quot;commit_hash=${commithash.long}\nos=${os.version}\nStreams_${streamsversion}&quot; > ${release.info.file}"/>
		</exec>
		<echo message="Generated release info file ${release.info.file}"/>
		<exec executable="bash" failonerror="true">
			<arg value="-c" />
			<arg value="cat ${release.info.file}" />
		</exec>
		<!-- Extract info from the toolkit's info.xml -->
		<xmlproperty file="${toolkit}/info.xml" prefix="tkinfo" keepRoot="no"/>
	</target>

	<target name="releaseinfo-clean" description="remove the release information file ${release.info.file}">
		<delete file="${release.info.file}"/>
	</target>

	<!--- Targets to purge the workspace before a release archive is ptroduced -->
	<target name="clean-ignored" depends="warn-unclean" description="Remove all git-ignored files (exclude model files) and warn if workspace has uncommited changes"/>

	<target name="warn-unclean" depends="check-unclean" if="has.uncommited">
		<echo>!Your workspace is not clean!</echo>
		<echo>Commit all changes before you produce a release</echo>
		<echo>commitstatus:</echo>
		<echo>${commitstatus}</echo>
		<input>Press Return key to continue or ^C to exit...</input>
	</target>

	<target name="check-unclean" depends="warn-untracked">
		<exec executable="git" outputproperty="commitstatus">
			<arg value="status" />
			<arg value="--porcelain" />
		</exec>
		<!-- set condition true if there are any non-whitespaces -->
		<condition property="has.uncommited">
			<matches string="${commitstatus}" pattern="\S" multiline="true"/>
		</condition>
		<echo message="has.uncommited=${has.uncommited}"/>
	</target>

	<target name="warn-untracked" depends="check-untracked" if="has.untracked">
		<echo>!!! DANGER: Git-ignored files to be removed from your workspace:</echo>
		<echo>${untracked}</echo>
		<input>Press Return key to continue or ^C to exit...</input>
		<exec executable="git" failonerror="true">
			<arg value="clean"/>
			<arg value="--force"/>
			<arg value="-d"/>
			<arg value="-x"/>
			<arg value="--"/>
			<arg value="${toolkit}/"/>
			<arg value="samples/"/>
			<arg value="README.md"/>
			<arg value="doc/"/>
		</exec>
	</target>

	<target name="check-untracked">
		<exec executable="git" outputproperty="untracked" failonerror="true">
			<arg value="clean"/>
			<arg value="--dry-run"/>
			<arg value="-d"/>
			<arg value="-x"/>
			<arg value="--"/>
			<arg value="${toolkit}/"/>
			<arg value="samples/"/>
			<arg value="README.md"/>
			<arg value="doc/"/>
		</exec>
		<!-- set condition true if there are any non-whitespaces -->
		<condition property="has.untracked">
			<matches string="${untracked}" pattern="\S" multiline="true"/>
		</condition>
		<echo message="has.untracked=${has.untracked}"/>
	</target>

</project>
